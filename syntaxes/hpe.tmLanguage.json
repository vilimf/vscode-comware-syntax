{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "HPE Comware",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "comment": "Comments and unimportant stuffs",
          "name": "comment.procurve",
          "match": "\\b(?<!-)(flexible|module|;|conf|end|exit)(?![\\w-])|alias COMMENT.*"
        },
        {
          "comment": "No and Disable",
          "name": "invalid.procurve",
          "match": "\\b(no|disable)\\b"
        },
        {
          "comment": "Speed-Duplex",
          "name": "entity.name.selector.procurve",
          "match": ".*speed-duplex.*"
        },
        {
          "comment": "Spanning-Tree",
          "name": "string.procurve",
          "match": ".*(spanning-tree).*"
        },
        {
          "comment": "Trunk",
          "name": "storage.modifier.procurve",
          "match": ".*trunk.*"
        },
        {
          "comment": "IGMP",
          "name": "entity.other.attribute-name.procurve",
          "match": ".*igmp"
        },
        {
          "comment": "DHCP Snooping",
          "name": "header.procurve",
          "match": ".*dhcp-snooping"
        },
        {
          "comment": "IP Authorized Managers",
          "name": "constant.procurve",
          "match": ".*ip authorized-managers"
        },
        {
          "comment": "SNTP & Time",
          "name": "entity.name.selector.procurve",
          "match": "^\\s*(?<!-)(sntp|time\\w*)"
        },
        {
          "comment": "SNMP",
          "name": "entity.other.attribute-name.procurve",
          "match": "\\b(snmp-\\w+)\\b"
        },
        {
          "comment": "Interface",
          "name": "meta.preprocessor.procurve",
          "match": ".*(interface|int)\\b.*"
        },
        {
          "comment": "VLAN",
          "name": "markup.deleted.procurve",
          "match": ".*vlan.*"
        },
        {
          "comment": "OOBM",
          "name": "invalid.procurve",
          "match": ".*oobm.*"
        },
        {
          "comment": "Untagged",
          "name": "markup.changed.procurve",
          "match": "^\\s*untagged.*"
        },
        {
          "comment": "Tagged",
          "name": "keyword.control.directive.procurve",
          "match": "^\\s*tagged.*"
        },
        {
          "comment": "Loop Protection",
          "name": "keyword.control.directive.procurve",
          "match": "^\\s*loop-protect.*"
        },
        {
          "comment": "Passwords",
          "name": "punctuation.definition.logical-expression.procurve",
          "match": "^\\s*password.*"
        },
        {
          "comment": "Central variables",
          "name": "keyword.control.untitled.procurve",
          "match": "\\%.+\\%"
        },
        {
          "comment": "General numbers",
          "match": "(?<=\\s)(\\d+)(?=[;]|\\s)",
          "captures": {
            "1": {
              "name": "string.procurve"
            }
          }
        },
        {
          "comment": "Subnet Mask with Interesting Octets",
          "name": "keyword.control.procurve",
          "match": "(?<!(?:\\.|\\w))(255(?:\\.255){3})|(((?:255\\.){1,3})((?:254|252|248|240|224|192|128|0+)(?!\\.[1-9]+)(?:\\.0){0,2}))|(((255|254|252|248|240|224|192|128|0+))(?:\\.0+){3})(?!(?:\\.|\\w))",
          "captures": {
            "1": {
              "name": "string.procurve"
            },
            "2": {
              "name": "string.procurve"
            },
            "4": {
              "name": "variable.procurve"
            },
            "5": {
              "name": "variable.procurve"
            }
          }
        },
        {
          "comment": "IPv4 Addresses with/without subnet",
          "match": "\\b((?:(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))(/([0-9]|[1-2][0-9]|3[0-2]))?\\b",
          "captures": {
            "1": {
              "name": "keyword.control.less.procurve"
            },
            "2": {
              "name": "variable.procurve"
            }
          }
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.procurve",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "variable.procurve",
          "match": "\\\\."
        }
      ]
    }
  },
  "scopeName": "text.procurve"
}
